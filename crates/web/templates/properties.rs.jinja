use crate::{
    css::{
        layout::Sides,
        values::*,
        style::specified::*,
        ParseError, Parser,
    },
    static_interned, InternedString,
};

#[derive(Clone, Copy, Debug, PartialEq, Eq, Default)]
pub enum Important {
    Yes,
    #[default]
    No,
}

/// Enumerates the CSS properties supported by the user agent
#[derive(Clone, Debug)]
pub enum StyleProperty {
    {% macro make_property(name, value, specification) %}
    /// <{{ specification }}>
    {{ name}}({{ value }}),
    {% endmacro %}

    {% for property in properties %}
        {% if "longhands" in property %}
            {# This value is a shorthand, add all its longhands as well #}
            {% set longhands = property["longhands"] %}

            {% if longhands["type"] == "4-sides" %}
                {# Add a variant for each of the longhands #}
                {% for side in SIDES %}
                    {% set specification = longhands["specification"].replace("SIDE", side) %}
                    {% set name = to_camel_case(longhands["name"].replace("SIDE", side)) %}
                    {{  
                        make_property(
                            name,
                            longhands["value"],
                            specification) 
                    }}
                {% endfor %}

                {# Add a variant for the longhand itself #}
                {{
                    make_property(
                    to_camel_case(property["name"]),
                    "Sides<" + longhands["value"] + ">",
                    property["specification"]) 
                }}
            {% endif%}
        {% else %}
            {{ 
                make_property(
                    to_camel_case(property["name"]),
                    property["value"],
                    property["specification"]) 
            }}
        {% endif %}
    {% endfor %}

    // Hand-written code for properties with special behaviour

    // 1. "border": a shorthand for "border-$SIDE" which is itself a shorthand
    /// <https://drafts.csswg.org/css-backgrounds/#propdef-border>
    Border(Border),

    /// <https://drafts.csswg.org/css-backgrounds/#propdef-border-top>
    BorderTop(Border),

    /// <https://drafts.csswg.org/css-backgrounds/#propdef-border-right>
    BorderRight(Border),

    /// <https://drafts.csswg.org/css-backgrounds/#propdef-border-bottom>
    BorderBottom(Border),

    /// <https://drafts.csswg.org/css-backgrounds/#propdef-border-left>
    BorderLeft(Border),
}

#[derive(Clone, Debug)]
pub struct StylePropertyDeclaration {
    pub value: StyleProperty,

    /// Whether or not the property was declared with `!important`.
    ///
    /// For example: `color: red!important;`
    pub important: Important,
}

impl StyleProperty {
    pub fn parse_value(
        parser: &mut Parser<'_>,
        property_name: InternedString,
    ) -> Result<Self, ParseError> {
        let property = match property_name {
            {% macro property_arm(name) %}
            static_interned!("{{ name }}") => Self::{{ to_camel_case(name) }}(parser.parse()?),
            {% endmacro %}

            {% for property in properties %}
                {% set property_name = to_camel_case(property["name"]) %}
                {% if "longhands" in property %}
                    {# The value is a shorthand #}
                    {% set longhands = property["longhands"] %}

                    {% if longhands["type"] == "4-sides" %}
                        {# Handle each longhand #}
                        {% for side in SIDES %}
                            {% set name = longhands["name"].replace("SIDE", side) %}

                            {{  
                                property_arm(name)
                            }}
                        {% endfor %}

                        {# Handle the shorthand itself #}
                        static_interned!("{{ property["name"] }}") => Self::{{ property_name }}(parser.parse_four_sided_property()?),
                    {% endif%}
                {% else %}
                    {# The value is not a shorthand #}
                    {{ property_arm(property["name"]) }}
                {% endif %}
            {% endfor %}

            // Hand-written code for properties with special behaviour
            static_interned!("border") => Self::Border(parser.parse()?),
            static_interned!("border-top") => Self::BorderTop(parser.parse()?),
            static_interned!("border-right") => Self::BorderRight(parser.parse()?),
            static_interned!("border-bottom") => Self::BorderBottom(parser.parse()?),
            static_interned!("border-left") => Self::BorderLeft(parser.parse()?),

            _ => {
                log::warn!("Unknown CSS property name: {:?}", property_name.to_string());
                return Err(ParseError);
            },
        };
        Ok(property)
    }
}
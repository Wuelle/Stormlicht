{% macro make_property(name, type, specification) %}
/// <{{ specification }}>
{{ name }}: {{ type }},
{% endmacro %}

use std::rc::Rc;

use super::{
    StyleProperty,
    values::*,
    style::{ToComputedStyle, StyleContext, computed::*},
    layout::Pixels,
};

{% macro create_style_struct(property_set) %}
    {% for property in property_set %}
        {% set property_name = to_snake_case(property["name"]) %}
        {% if "longhands" in property %}
            {% set longhands = property["longhands"] %}

            {% if longhands["type"] == "4-sides" %}
                {% for side in SIDES %}
                    {% set name = to_snake_case(longhands["name"].replace("SIDE", side)) %}
                    {% set specification = longhands["specification"].replace("SIDE", side) %}

                    {{ make_property(name, longhands["value"], specification) }}
                {% endfor %}
            {% endif%}
        {% else %}
            {{ make_property(property_name, property["value"], property["specification"])}}
        {% endif %}
    {% endfor %}
{% endmacro %}

#[derive(Clone, Debug)]
struct InheritedData {
    {{ create_style_struct(inherited_properties) }}
}

#[derive(Clone, Debug)]
struct NonInheritedData {
    {{ create_style_struct(non_inherited_properties) }}
}

#[derive(Clone, Debug, Default)]
pub struct ComputedStyle {
    inherited_data: Rc<InheritedData>,
    non_inherited_data: Rc<NonInheritedData>,
}

impl ComputedStyle {
    pub fn get_inherited(&self) -> Self {
        Self {
            inherited_data: self.inherited_data.clone(),
            non_inherited_data: Default::default()
        }
    }

    {% macro create_getter_and_setter(name, type, group) %}
        #[allow(dead_code)]
        #[must_use]
        pub fn {{ name }}(&self) -> &{{ type }} {
            &self.{{ group }}.{{ name }}
        }

        #[allow(dead_code)]
        pub fn set_{{ name }}(&mut self, value: {{ type }}) {
            Rc::make_mut(&mut self.{{ group }}).{{ name }} = value
        }
    {% endmacro %}


    {% macro access_functions(property_set, group) %}
        {% for property in property_set %}
            {% set property_name = to_snake_case(property["name"]) %}

            {% if "longhands" in property %}
                {% set longhands = property["longhands"] %}

                {% if longhands["type"] == "4-sides" %}
                    {% for side in SIDES %}
                        {% set name = to_snake_case(longhands["name"].replace("SIDE", side)) %}

                        {{ create_getter_and_setter(name, longhands["value"], group) }}
                    {% endfor %}
                {% endif%}
            {% else %}
                {{ create_getter_and_setter(property_name, property["value"], group )}}
            {% endif %}
        {% endfor %}
    {% endmacro %}

    {{ access_functions(inherited_properties, "inherited_data") }}
    {{ access_functions(non_inherited_properties, "non_inherited_data") }}

    /// Assign a specific value to a property
    ///
    /// This expands shorthand properties like `margin`.
    pub fn set_property(&mut self, property: StyleProperty, context: &StyleContext) {
        match property {
            {% macro assign_property(name, assign_to) %}
            StyleProperty::{{ to_camel_case(name)}}(value) 
                    => self.set_{{ to_snake_case(assign_to) }}(value.to_computed_style(context)),
            {% endmacro %}

            {% for property in inherited_properties + non_inherited_properties %}
                {% if "longhands" in property %}
                    {% set longhands = property["longhands"] %}

                    {% if longhands["type"] == "4-sides" %}
                        {% for side in SIDES %}
                            {% set name = to_snake_case(longhands["name"].replace("SIDE", side)) %}

                            {{ assign_property(name, name) }}
                        {% endfor %}

                        StyleProperty::{{to_camel_case(property["name"])}}(sides) => {
                            {# Expand the shorthand property to all four (longhand) properties #}
                            {% for side in SIDES %}
                                {% set name = to_snake_case(longhands["name"].replace("SIDE", side)) %}

                                let value_on_this_side = sides.{{ side }}.to_computed_style(context);
                                self.set_{{ name }}(value_on_this_side);
                            {% endfor %}
                        },
                    {% endif%}
                {% else %}
                    {{ assign_property(property["name"], property["name"]) }}
                {% endif %}
            {% endfor %}

            // Hand-written code for properties with special behaviour
            {% macro set_border(side) %}
                self.set_border_{{ side }}_color(border.color);
                self.set_border_{{ side }}_style(border.style);
                self.set_border_{{ side }}_width(border.width);
            {% endmacro %}
            StyleProperty::Border(specified_border) => {
                let border = specified_border.to_computed_style(context);

                {{ set_border("top") }}
                {{ set_border("right") }}
                {{ set_border("bottom") }}
                {{ set_border("left") }}
            },
            StyleProperty::BorderTop(specified_border) => {
                let border = specified_border.to_computed_style(context);

                {{ set_border("top") }}
            },
            StyleProperty::BorderRight(specified_border) => {
                let border = specified_border.to_computed_style(context);

                {{ set_border("right") }}
            },
            StyleProperty::BorderBottom(specified_border) => {
                let border = specified_border.to_computed_style(context);

                {{ set_border("bottom") }}
            },
            StyleProperty::BorderLeft(specified_border) => {
                let border = specified_border.to_computed_style(context);

                {{ set_border("left") }}
            },
        }
    }
}

{% macro default_style_group(property_set) %}
    {% for property in property_set %}
        {% set property_name = to_snake_case(property["name"]) %}
        {% if "longhands" in property %}
            {% set longhands = property["longhands"] %}

            {% if longhands["type"] == "4-sides" %}
                {% for side in SIDES %}
                    {% set name = to_snake_case(longhands["name"].replace("SIDE", side)) %}

                    {{ name }}: {{ longhands["initial"] }},
                {% endfor %}
            {% endif%}
        {% else %}
            {{ property_name }}: {{ property["initial"] }}, 
        {% endif %}
    {% endfor %}
{% endmacro %}

impl Default for InheritedData {
    fn default() -> Self {
        Self {
            {{ default_style_group(inherited_properties) }}
        }
    }
}

impl Default for NonInheritedData {
    fn default() -> Self {
        Self {
            {{ default_style_group(non_inherited_properties) }}
        }
    }
}


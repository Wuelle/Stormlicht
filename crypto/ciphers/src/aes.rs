//! [AES](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197.pdf) implementation.

use crate::BlockCipher;

const S_BOX: [u8; 256] = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
];

const INVERSE_S_BOX: [u8; 256] = [
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
];

const ROUND_CONSTANT: [[u8; 4]; 11] = [
    [0x00, 0x00, 0x00, 0x00],
    [0x01, 0x00, 0x00, 0x00],
    [0x02, 0x00, 0x00, 0x00],
    [0x04, 0x00, 0x00, 0x00],
    [0x08, 0x00, 0x00, 0x00],
    [0x10, 0x00, 0x00, 0x00],
    [0x20, 0x00, 0x00, 0x00],
    [0x40, 0x00, 0x00, 0x00],
    [0x80, 0x00, 0x00, 0x00],
    [0x1B, 0x00, 0x00, 0x00],
    [0x36, 0x00, 0x00, 0x00],
];

const EXP_TABLE: [u8; 256] = [
    0x01, 0x03, 0x05, 0x0f, 0x11, 0x33, 0x55, 0xff, 0x1a, 0x2e, 0x72, 0x96, 0xa1, 0xf8, 0x13, 0x35,
    0x5f, 0xe1, 0x38, 0x48, 0xd8, 0x73, 0x95, 0xa4, 0xf7, 0x02, 0x06, 0x0a, 0x1e, 0x22, 0x66, 0xaa,
    0xe5, 0x34, 0x5c, 0xe4, 0x37, 0x59, 0xeb, 0x26, 0x6a, 0xbe, 0xd9, 0x70, 0x90, 0xab, 0xe6, 0x31,
    0x53, 0xf5, 0x04, 0x0c, 0x14, 0x3c, 0x44, 0xcc, 0x4f, 0xd1, 0x68, 0xb8, 0xd3, 0x6e, 0xb2, 0xcd,
    0x4c, 0xd4, 0x67, 0xa9, 0xe0, 0x3b, 0x4d, 0xd7, 0x62, 0xa6, 0xf1, 0x08, 0x18, 0x28, 0x78, 0x88,
    0x83, 0x9e, 0xb9, 0xd0, 0x6b, 0xbd, 0xdc, 0x7f, 0x81, 0x98, 0xb3, 0xce, 0x49, 0xdb, 0x76, 0x9a,
    0xb5, 0xc4, 0x57, 0xf9, 0x10, 0x30, 0x50, 0xf0, 0x0b, 0x1d, 0x27, 0x69, 0xbb, 0xd6, 0x61, 0xa3,
    0xfe, 0x19, 0x2b, 0x7d, 0x87, 0x92, 0xad, 0xec, 0x2f, 0x71, 0x93, 0xae, 0xe9, 0x20, 0x60, 0xa0,
    0xfb, 0x16, 0x3a, 0x4e, 0xd2, 0x6d, 0xb7, 0xc2, 0x5d, 0xe7, 0x32, 0x56, 0xfa, 0x15, 0x3f, 0x41,
    0xc3, 0x5e, 0xe2, 0x3d, 0x47, 0xc9, 0x40, 0xc0, 0x5b, 0xed, 0x2c, 0x74, 0x9c, 0xbf, 0xda, 0x75,
    0x9f, 0xba, 0xd5, 0x64, 0xac, 0xef, 0x2a, 0x7e, 0x82, 0x9d, 0xbc, 0xdf, 0x7a, 0x8e, 0x89, 0x80,
    0x9b, 0xb6, 0xc1, 0x58, 0xe8, 0x23, 0x65, 0xaf, 0xea, 0x25, 0x6f, 0xb1, 0xc8, 0x43, 0xc5, 0x54,
    0xfc, 0x1f, 0x21, 0x63, 0xa5, 0xf4, 0x07, 0x09, 0x1b, 0x2d, 0x77, 0x99, 0xb0, 0xcb, 0x46, 0xca,
    0x45, 0xcf, 0x4a, 0xde, 0x79, 0x8b, 0x86, 0x91, 0xa8, 0xe3, 0x3e, 0x42, 0xc6, 0x51, 0xf3, 0x0e,
    0x12, 0x36, 0x5a, 0xee, 0x29, 0x7b, 0x8d, 0x8c, 0x8f, 0x8a, 0x85, 0x94, 0xa7, 0xf2, 0x0d, 0x17,
    0x39, 0x4b, 0xdd, 0x7c, 0x84, 0x97, 0xa2, 0xfd, 0x1c, 0x24, 0x6c, 0xb4, 0xc7, 0x52, 0xf6, 0x01,
];

/// The first element is technically undefined, but set to zero
const LOG_TABLE: [u8; 256] = [
    0x00, 0x00, 0x19, 0x01, 0x32, 0x02, 0x1a, 0xc6, 0x4b, 0xc7, 0x1b, 0x68, 0x33, 0xee, 0xdf, 0x03,
    0x64, 0x04, 0xe0, 0x0e, 0x34, 0x8d, 0x81, 0xef, 0x4c, 0x71, 0x08, 0xc8, 0xf8, 0x69, 0x1c, 0xc1,
    0x7d, 0xc2, 0x1d, 0xb5, 0xf9, 0xb9, 0x27, 0x6a, 0x4d, 0xe4, 0xa6, 0x72, 0x9a, 0xc9, 0x09, 0x78,
    0x65, 0x2f, 0x8a, 0x05, 0x21, 0x0f, 0xe1, 0x24, 0x12, 0xf0, 0x82, 0x45, 0x35, 0x93, 0xda, 0x8e,
    0x96, 0x8f, 0xdb, 0xbd, 0x36, 0xd0, 0xce, 0x94, 0x13, 0x5c, 0xd2, 0xf1, 0x40, 0x46, 0x83, 0x38,
    0x66, 0xdd, 0xfd, 0x30, 0xbf, 0x06, 0x8b, 0x62, 0xb3, 0x25, 0xe2, 0x98, 0x22, 0x88, 0x91, 0x10,
    0x7e, 0x6e, 0x48, 0xc3, 0xa3, 0xb6, 0x1e, 0x42, 0x3a, 0x6b, 0x28, 0x54, 0xfa, 0x85, 0x3d, 0xba,
    0x2b, 0x79, 0x0a, 0x15, 0x9b, 0x9f, 0x5e, 0xca, 0x4e, 0xd4, 0xac, 0xe5, 0xf3, 0x73, 0xa7, 0x57,
    0xaf, 0x58, 0xa8, 0x50, 0xf4, 0xea, 0xd6, 0x74, 0x4f, 0xae, 0xe9, 0xd5, 0xe7, 0xe6, 0xad, 0xe8,
    0x2c, 0xd7, 0x75, 0x7a, 0xeb, 0x16, 0x0b, 0xf5, 0x59, 0xcb, 0x5f, 0xb0, 0x9c, 0xa9, 0x51, 0xa0,
    0x7f, 0x0c, 0xf6, 0x6f, 0x17, 0xc4, 0x49, 0xec, 0xd8, 0x43, 0x1f, 0x2d, 0xa4, 0x76, 0x7b, 0xb7,
    0xcc, 0xbb, 0x3e, 0x5a, 0xfb, 0x60, 0xb1, 0x86, 0x3b, 0x52, 0xa1, 0x6c, 0xaa, 0x55, 0x29, 0x9d,
    0x97, 0xb2, 0x87, 0x90, 0x61, 0xbe, 0xdc, 0xfc, 0xbc, 0x95, 0xcf, 0xcd, 0x37, 0x3f, 0x5b, 0xd1,
    0x53, 0x39, 0x84, 0x3c, 0x41, 0xa2, 0x6d, 0x47, 0x14, 0x2a, 0x9e, 0x5d, 0x56, 0xf2, 0xd3, 0xab,
    0x44, 0x11, 0x92, 0xd9, 0x23, 0x20, 0x2e, 0x89, 0xb4, 0x7c, 0xb8, 0x26, 0x77, 0x99, 0xe3, 0xa5,
    0x67, 0x4a, 0xed, 0xde, 0xc5, 0x31, 0xfe, 0x18, 0x0d, 0x63, 0x8c, 0x80, 0xc0, 0xf7, 0x70, 0x07,
];

macro_rules! galois_multiply {
    ($x: expr, 1) => {
        $x
    };
    ($x: expr, 2) => {{
        let mut c = $x << 1;

        if $x & 0x80 != 0 {
            c ^= 0x1b;
        }
        c
    }};
    ($x: expr, 3) => {
        galois_multiply!($x, 2) ^ $x
    };
    ($x: expr, $y: expr) => {
        if $x != 0 && $x != 0 {
            EXP_TABLE[(LOG_TABLE[$x as usize] as usize + LOG_TABLE[$y as usize] as usize) % 0xff]
        } else {
            0
        }
    };
}

/// AES Cipher
/// Theoretically, sizes other than `128`, `192` and `256`
/// can be specified on the const generic parameter `S`.
/// However, only `AES<128>`, `AES<192>` and `AES<256>`
/// can be constructed with a `new` method.
///
/// The second generic parameter defines the number of round keys and
/// should not be set by the user.
#[derive(Clone, Copy, Debug)]
pub struct AES<const S: usize, const R: usize> {
    round_keys: [[u8; 16]; R],
    /// The state is implemented in column-major layout, so `self.state = [column1, column2, column3, column4]`.
    state: [[u8; 4]; 4],
}

#[inline]
fn rot_word(word_bytes: [u8; 4]) -> [u8; 4] {
    let mut w = word_bytes;
    w.rotate_left(1);
    w
}

#[inline]
fn sub_word(word_bytes: [u8; 4]) -> [u8; 4] {
    [
        S_BOX[word_bytes[0] as usize],
        S_BOX[word_bytes[1] as usize],
        S_BOX[word_bytes[2] as usize],
        S_BOX[word_bytes[3] as usize],
    ]
}

#[inline]
fn xor_words(a: [u8; 4], b: [u8; 4]) -> [u8; 4] {
    [a[0] ^ b[0], a[1] ^ b[1], a[2] ^ b[2], a[3] ^ b[3]]
}

// expand a master key into B round keys
fn key_expand<const A: usize, const B: usize>(master_key: [u8; A]) -> [[u8; A]; B] {
    let mut round_keys = [[0; A]; B];
    round_keys[0] = master_key;

    let mut previous_word = master_key[A - 4..A].try_into().unwrap();
    let mut previous_round_key = round_keys[0];

    for (round_key_index, round_key) in round_keys.iter_mut().enumerate().skip(1) {
        // First word in each round key is special
        let tmp = xor_words(
            sub_word(rot_word(previous_word)),
            ROUND_CONSTANT[round_key_index],
        );
        let first_word_of_last_key = previous_round_key[..4].try_into().unwrap();
        previous_word = xor_words(first_word_of_last_key, tmp);
        round_key[0..4].copy_from_slice(&previous_word);

        // The other ones are simpler
        for (word, word_in_previous_round_key) in round_key
            .chunks_exact_mut(4)
            .zip(previous_round_key.chunks_exact(4))
            .skip(1)
        {
            previous_word = xor_words(
                word_in_previous_round_key.try_into().unwrap(),
                previous_word,
            );
            word.copy_from_slice(&previous_word);
        }
        previous_round_key = *round_key;
    }

    round_keys
}

impl<const A: usize, const B: usize> AES<A, B> {
    pub fn encrypt_block(&mut self, input: [u8; 16]) -> [u8; 16] {
        self.set_state(input);
        self.add_round_key(0);

        for i in 1..B - 1 {
            self.sub_bytes();
            self.shift_rows();
            self.mix_columns();
            self.add_round_key(i);
        }

        self.sub_bytes();
        self.shift_rows();
        self.add_round_key(B - 1);

        // Flatten the state into the output array
        // Can be simplified once "slice_flatten #95629" gets stabilized
        let mut output = [0; 16];
        for (source, destination) in self.state.iter().zip(output.chunks_exact_mut(4)) {
            destination.copy_from_slice(source);
        }
        output
    }

    pub fn decrypt_block(&mut self, input: [u8; 16]) -> [u8; 16] {
        self.set_state(input);
        self.add_round_key(B - 1);
        self.inverse_shift_rows();
        self.inverse_sub_bytes();

        for i in (1..B - 1).rev() {
            self.add_round_key(i);
            self.inverse_mix_columns();
            self.inverse_shift_rows();
            self.inverse_sub_bytes();
        }

        self.add_round_key(0);

        // Flatten the state into the output array
        // Can be simplified once "slice_flatten #95629" gets stabilized
        let mut output = [0; 16];
        for (source, destination) in self.state.iter().zip(output.chunks_exact_mut(4)) {
            destination.copy_from_slice(source);
        }
        output
    }

    #[inline]
    fn set_state(&mut self, input: [u8; 16]) {
        self.state[0].copy_from_slice(&input[0x00..0x04]);
        self.state[1].copy_from_slice(&input[0x04..0x08]);
        self.state[2].copy_from_slice(&input[0x08..0x0C]);
        self.state[3].copy_from_slice(&input[0x0C..0x10]);
    }

    #[inline]
    fn sub_bytes(&mut self) {
        for i in 0..4 {
            for j in 0..4 {
                self.state[i][j] = S_BOX[self.state[i][j] as usize];
            }
        }
    }

    #[inline]
    fn inverse_sub_bytes(&mut self) {
        for i in 0..4 {
            for j in 0..4 {
                self.state[i][j] = INVERSE_S_BOX[self.state[i][j] as usize];
            }
        }
    }

    #[inline]
    fn inverse_shift_rows(&mut self) {
        // First row is not rotated

        // Second row is rotated by 1 to the right
        let swap = self.state[0][1];
        self.state[0][1] = self.state[3][1];
        self.state[3][1] = self.state[2][1];
        self.state[2][1] = self.state[1][1];
        self.state[1][1] = swap;

        // Third row is rotated by two
        let swap = self.state[0][2];
        self.state[0][2] = self.state[2][2];
        self.state[2][2] = swap;

        let swap = self.state[1][2];
        self.state[1][2] = self.state[3][2];
        self.state[3][2] = swap;

        // Fourth row is rotated 1 to the left (or three to the right)
        let swap = self.state[0][3];
        self.state[0][3] = self.state[1][3];
        self.state[1][3] = self.state[2][3];
        self.state[2][3] = self.state[3][3];
        self.state[3][3] = swap;
    }

    #[inline]
    /// ```text, ignore
    /// shiftRows                Before         After
    /// Row 1: No change        0 4  8 12      0  4  8 12    
    /// Row 2: Left Shift by 1  1 5  9 13  =>  5  9 13  1    
    /// Row 3: Left Shift by 2  2 6 10 14     10 14  2  6   
    /// Row 4: Left Shift by 3  3 7 11 15     15  3  7 11  
    /// ```
    fn shift_rows(&mut self) {
        // First row is not rotated

        // Second row is rotated by 1 to the left
        let swap = self.state[0][1];
        self.state[0][1] = self.state[1][1];
        self.state[1][1] = self.state[2][1];
        self.state[2][1] = self.state[3][1];
        self.state[3][1] = swap;

        // Third row is rotated by two
        let swap = self.state[0][2];
        self.state[0][2] = self.state[2][2];
        self.state[2][2] = swap;

        let swap = self.state[1][2];
        self.state[1][2] = self.state[3][2];
        self.state[3][2] = swap;

        // Fourth row is rotated 1 to the right (or three to the left)
        let swap = self.state[0][3];
        self.state[0][3] = self.state[3][3];
        self.state[3][3] = self.state[2][3];
        self.state[2][3] = self.state[1][3];
        self.state[1][3] = swap;
    }

    #[inline]
    fn mix_columns(&mut self) {
        self.mix_column(0);
        self.mix_column(1);
        self.mix_column(2);
        self.mix_column(3);
    }

    #[inline]
    fn inverse_mix_columns(&mut self) {
        self.inverse_mix_column(0);
        self.inverse_mix_column(1);
        self.inverse_mix_column(2);
        self.inverse_mix_column(3);
    }

    #[inline]
    fn mix_column(&mut self, index: usize) {
        let column = self.state[index];
        self.state[index][0] = galois_multiply!(column[0], 2)
            ^ galois_multiply!(column[1], 3)
            ^ galois_multiply!(column[2], 1)
            ^ galois_multiply!(column[3], 1);

        self.state[index][1] = galois_multiply!(column[0], 1)
            ^ galois_multiply!(column[1], 2)
            ^ galois_multiply!(column[2], 3)
            ^ galois_multiply!(column[3], 1);

        self.state[index][2] = galois_multiply!(column[0], 1)
            ^ galois_multiply!(column[1], 1)
            ^ galois_multiply!(column[2], 2)
            ^ galois_multiply!(column[3], 3);

        self.state[index][3] = galois_multiply!(column[0], 3)
            ^ galois_multiply!(column[1], 1)
            ^ galois_multiply!(column[2], 1)
            ^ galois_multiply!(column[3], 2);
    }

    #[inline]
    fn inverse_mix_column(&mut self, index: usize) {
        let column = self.state[index];
        self.state[index][0] = galois_multiply!(column[0], 0xE)
            ^ galois_multiply!(column[1], 0xB)
            ^ galois_multiply!(column[2], 0xD)
            ^ galois_multiply!(column[3], 0x9);

        self.state[index][1] = galois_multiply!(column[0], 0x9)
            ^ galois_multiply!(column[1], 0xE)
            ^ galois_multiply!(column[2], 0xB)
            ^ galois_multiply!(column[3], 0xD);

        self.state[index][2] = galois_multiply!(column[0], 0xD)
            ^ galois_multiply!(column[1], 0x9)
            ^ galois_multiply!(column[2], 0xE)
            ^ galois_multiply!(column[3], 0xB);

        self.state[index][3] = galois_multiply!(column[0], 0xB)
            ^ galois_multiply!(column[1], 0xD)
            ^ galois_multiply!(column[2], 0x9)
            ^ galois_multiply!(column[3], 0xE);
    }

    #[inline]
    fn add_round_key(&mut self, i: usize) {
        let round_key = self.round_keys[i];
        self.state[0] = xor_words(self.state[0], round_key[0x00..0x04].try_into().unwrap());
        self.state[1] = xor_words(self.state[1], round_key[0x04..0x08].try_into().unwrap());
        self.state[2] = xor_words(self.state[2], round_key[0x08..0x0C].try_into().unwrap());
        self.state[3] = xor_words(self.state[3], round_key[0x0C..0x10].try_into().unwrap());
    }
}

impl BlockCipher for AES<128, 11> {
    type Block = [u8; 16];
    type Key = [u8; 16];

    fn new(key: Self::Key) -> Self
    where
        Self: Sized,
    {
        Self {
            round_keys: key_expand::<16, 11>(key),
            state: [[0; 4]; 4],
        }
    }

    fn encrypt_block(&mut self, input: Self::Block) -> Self::Block {
        self.encrypt_block(input)
    }

    fn decrypt_block(&mut self, input: Self::Block) -> Self::Block {
        self.decrypt_block(input)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    const MASTER_KEY: [u8; 16] = [
        0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f,
        0x3c,
    ];

    #[test]
    fn test_rotate_word() {
        let w = [0, 1, 2, 3];
        let rotated = rot_word(w);
        assert_eq!(rotated, [1, 2, 3, 0]);
    }

    #[test]
    fn test_sub_bytes() {
        let mut aes = AES::new(*b"1234567890ABCDEF");
        let state = aes.state;
        aes.sub_bytes();
        aes.inverse_sub_bytes();
        assert_eq!(state, aes.state);
    }

    #[test]
    fn test_expand_key() {
        let aes = AES::new(MASTER_KEY);
        let expected_round_keys = [
            [
                0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
                0x4f, 0x3c,
            ],
            [
                0xa0, 0xfa, 0xfe, 0x17, 0x88, 0x54, 0x2c, 0xb1, 0x23, 0xa3, 0x39, 0x39, 0x2a, 0x6c,
                0x76, 0x05,
            ],
            [
                0xf2, 0xc2, 0x95, 0xf2, 0x7a, 0x96, 0xb9, 0x43, 0x59, 0x35, 0x80, 0x7a, 0x73, 0x59,
                0xf6, 0x7f,
            ],
            [
                0x3d, 0x80, 0x47, 0x7d, 0x47, 0x16, 0xfe, 0x3e, 0x1e, 0x23, 0x7e, 0x44, 0x6d, 0x7a,
                0x88, 0x3b,
            ],
            [
                0xef, 0x44, 0xa5, 0x41, 0xa8, 0x52, 0x5b, 0x7f, 0xb6, 0x71, 0x25, 0x3b, 0xdb, 0x0b,
                0xad, 0x00,
            ],
            [
                0xd4, 0xd1, 0xc6, 0xf8, 0x7c, 0x83, 0x9d, 0x87, 0xca, 0xf2, 0xb8, 0xbc, 0x11, 0xf9,
                0x15, 0xbc,
            ],
            [
                0x6d, 0x88, 0xa3, 0x7a, 0x11, 0x0b, 0x3e, 0xfd, 0xdb, 0xf9, 0x86, 0x41, 0xca, 0x00,
                0x93, 0xfd,
            ],
            [
                0x4e, 0x54, 0xf7, 0x0e, 0x5f, 0x5f, 0xc9, 0xf3, 0x84, 0xa6, 0x4f, 0xb2, 0x4e, 0xa6,
                0xdc, 0x4f,
            ],
            [
                0xea, 0xd2, 0x73, 0x21, 0xb5, 0x8d, 0xba, 0xd2, 0x31, 0x2b, 0xf5, 0x60, 0x7f, 0x8d,
                0x29, 0x2f,
            ],
            [
                0xac, 0x77, 0x66, 0xf3, 0x19, 0xfa, 0xdc, 0x21, 0x28, 0xd1, 0x29, 0x41, 0x57, 0x5c,
                0x00, 0x6e,
            ],
            [
                0xd0, 0x14, 0xf9, 0xa8, 0xc9, 0xee, 0x25, 0x89, 0xe1, 0x3f, 0x0c, 0xc8, 0xb6, 0x63,
                0x0c, 0xa6,
            ],
        ];

        assert_eq!(aes.round_keys, expected_round_keys)
    }

    #[test]
    fn test_aes_encrypt() {
        let plaintext_block = [
            0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37,
            0x07, 0x34,
        ];
        let expected_ciphertext = [
            0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb, 0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a,
            0x0b, 0x32,
        ];

        let mut cipher = AES::new(MASTER_KEY);
        let ciphertext = cipher.encrypt_block(plaintext_block);
        assert_eq!(ciphertext, expected_ciphertext);
    }

    #[test]
    fn test_aes_decrypt() {
        let expected_plaintext = [
            0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37,
            0x07, 0x34,
        ];
        let ciphertext = [
            0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb, 0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a,
            0x0b, 0x32,
        ];

        let mut cipher = AES::new(MASTER_KEY);
        let plaintext = cipher.decrypt_block(ciphertext);
        assert_eq!(plaintext, expected_plaintext);
    }

    #[test]
    fn test_inverse_sub_bytes() {
        let mut cipher = AES::new(MASTER_KEY);
        cipher.set_state(MASTER_KEY); // Just some bogus data to init the state
        let state = cipher.state;

        cipher.sub_bytes();
        cipher.inverse_sub_bytes();

        assert_eq!(state, cipher.state);
    }

    #[test]
    fn test_inverse_mix_columns() {
        let mut cipher = AES::new(MASTER_KEY);
        cipher.set_state(MASTER_KEY); // Just some bogus data to init the state
        let state = cipher.state;

        cipher.mix_columns();
        assert_ne!(state, cipher.state);
        cipher.inverse_mix_columns();

        assert_eq!(state, cipher.state);
    }

    #[test]
    fn test_shift_rows() {
        let mut cipher = AES::new(MASTER_KEY);
        cipher.set_state(MASTER_KEY); // Just some bogus data to init the state
        let state = cipher.state;

        cipher.shift_rows();
        cipher.inverse_shift_rows();

        assert_eq!(state, cipher.state);
    }
}
